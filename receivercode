# 수신자 코드
## 연결 설정, 데이터 수신 및 연결 종료를 포함하여 TCP의 주요 기능을 구현, 패킷 드롭을 처리합니다.

import socket
import random
import time

class TCPReceiver:
    def __init__(self, receiver_port, drop_prob):
        self.receiver_port = receiver_port
        self.drop_prob = drop_prob

        self.receiver_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.receiver_socket.bind(('', receiver_port))

        self.expected_seq_num = 0
        self.start_time = time.time()

    def log_event(self, event, packet=None):
        timestamp = time.time() - self.start_time
        if packet:
            print(f"[{timestamp:.2f}] {event} - SeqNum: {packet.seq_num}, AckNum: {packet.ack_num}")
        else:
            print(f"[{timestamp:.2f}] {event}")

    def handshake(self):
        # 연결 설정: 3-way 핸드셰이크
        syn_data, client_address = self.receiver_socket.recvfrom(1024)
        syn_pkt, _ = Packet.from_bytes(syn_data)
        if syn_pkt.flag == SYN_FLAG:
            self.log_event("Received SYN", syn_pkt)
            syn_ack_pkt = Packet(DATA, SYN_FLAG, 0, 1)
            self.receiver_socket.sendto(syn_ack_pkt.to_bytes(), client_address)
            self.log_event("Sent SYN-ACK", syn_ack_pkt)

            # Step 2: Receive ACK
            try:
                ack_data, _ = self.receiver_socket.recvfrom(1024)
                ack_pkt, _ = Packet.from_bytes(ack_data)
                if ack_pkt.flag == NONE and ack_pkt.ack_num == 1:
                    self.log_event("Received ACK", ack_pkt)
                    return client_address
            except socket.timeout:
                self.log_event("Handshake failed due to timeout")
        return None

    def receive_file(self, client_address):
        received_data = {}
        while True:
            data, _ = self.receiver_socket.recvfrom(1024)
            packet, _ = Packet.from_bytes(data)
            
            if packet.flag == FIN_FLAG:
                self.log_event("Received FIN", packet)
                fin_ack_pkt = Packet(DATA, FIN_FLAG, packet.seq_num)
                self.receiver_socket.sendto(fin_ack_pkt.to_bytes(), client_address)
                self.log_event("Sent FIN-ACK", fin_ack_pkt)
                break

            if random.random() < self.drop_prob:
                self.log_event("Dropped DATA", packet)
                continue

            if packet.seq_num == self.expected_seq_num:
                self.log_event("Received DATA", packet)
                received_data[packet.seq_num] = packet.data
                self.expected_seq_num += 1
            else:
                self.log_event("Out of order DATA", packet)
            
            ack_pkt = Packet(ACK, NONE, 0, self.expected_seq_num)
            self.receiver_socket.sendto(ack_pkt.to_bytes(), client_address)
            self.log_event("Sent ACK", ack_pkt)

    def teardown(self):
        fin_pkt = Packet(DATA, FIN_FLAG, self.expected_seq_num)
        self.receiver_socket.sendto(fin_pkt.to_bytes(), client_address)
        self.log_event("Sent FIN", fin_pkt)

        try:
            response, _ = self.receiver_socket.recvfrom(1024)
            fin_ack_pkt, _ = Packet.from_bytes(response)
            if fin_ack_pkt.flag == FIN_FLAG:
                self.log_event("Received FIN-ACK", fin_ack_pkt)
                ack_pkt = Packet(ACK, NONE, fin_ack_pkt.seq_num + 1)
                self.receiver_socket.sendto(ack_pkt.to_bytes(), client_address)
                self.log_event("Sent ACK", ack_pkt)
        except socket.timeout:
            self.log_event("Teardown failed due to timeout")

if __name__ == '__main__':
    import sys
    if len(sys.argv) != 3:
        print("Usage: receiver.py <receiver_port> <drop_prob>")
        sys.exit(1)

    receiver_port = int(sys.argv[1])
    drop_prob = float(sys.argv[2])

    receiver = TCPReceiver(receiver_port, drop_prob)
    client_address = receiver.handshake()
    if client_address:
        receiver.receive_file(client_address)
        receiver.teardown()
