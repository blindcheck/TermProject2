// 송신자 코드

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <signal.h>
#include <time.h>
#include <errno.h>

// 패킷 구조 정의
#define CHUNK_SIZE 1000
#define DATA 1
#define ACK 2
#define EOT 3

typedef struct {
    int type;       // 패킷 타입 (DATA, ACK, EOT)
    int seqNum;     // 시퀀스 번호
    int ackNum;     // ACK 번호
    int length;     // 데이터 길이
    char data[CHUNK_SIZE];  // 데이터
} Packet;

volatile sig_atomic_t timeout_flag = 0; // 타임아웃 플래그

// 알람을 위한 시그널 핸들러
void sigalrm_handler(int signum) {
    timeout_flag = 1;
}

// 이벤트 로그 함수
void log_event(const char *event) {
    time_t now;
    time(&now);
    printf("%s: %s\n", ctime(&now), event);
}

// 파일 전송 함수
void send_file(int sender_port, const char *receiver_ip, int receiver_port, int timeout_interval, const char *filename, float drop_prob) {
    int sockfd;
    struct sockaddr_in receiver_addr;
    socklen_t addr_len = sizeof(receiver_addr);
    FILE *file;
    Packet packet;
    Packet ack_packet;
    int seqNum = 0;
    ssize_t n;
    float random_prob;

    // UDP 소켓 생성
    sockfd = socket(AF_INET, SOCK_DGRAM, 0);
    if (sockfd < 0) {
        perror("socket");
        exit(EXIT_FAILURE);
    }

    // 수신자 주소 설정
    memset(&receiver_addr, 0, sizeof(receiver_addr));
    receiver_addr.sin_family = AF_INET;
    receiver_addr.sin_port = htons(receiver_port);
    if (inet_pton(AF_INET, receiver_ip, &receiver_addr.sin_addr) <= 0) {
        perror("inet_pton");
        exit(EXIT_FAILURE);
    }

    // 파일 열기
    file = fopen(filename, "rb");
    if (!file) {
        perror("fopen");
        exit(EXIT_FAILURE);
    }

    // 시그널 핸들러 설정
    signal(SIGALRM, sigalrm_handler);

    // 파일 읽고 패킷 전송
    while ((n = fread(packet.data, 1, CHUNK_SIZE, file)) > 0) {
        packet.type = DATA;
        packet.seqNum = seqNum;
        packet.ackNum = seqNum;
        packet.length = n;

        // 패킷 전송 및 ACK 대기
        while (1) {
            if (sendto(sockfd, &packet, sizeof(packet), 0, (struct sockaddr *)&receiver_addr, addr_len) < 0) {
                perror("sendto");
                exit(EXIT_FAILURE);
            }
            log_event("Sent DATA packet");

            // 타임아웃 설정
            timeout_flag = 0;
            alarm(timeout_interval);

            // ACK 대기
            while (!timeout_flag) {
                n = recvfrom(sockfd, &ack_packet, sizeof(ack_packet), 0, (struct sockaddr *)&receiver_addr, &addr_len);
                if (n < 0) {
                    if (errno == EINTR) continue; // 시그널에 의해 인터럽트됨
                    perror("recvfrom");
                    exit(EXIT_FAILURE);
                }
                if (ack_packet.type == ACK && ack_packet.ackNum == seqNum) {
                    log_event("Received ACK packet");
                    break;
                }
            }

            if (!timeout_flag) break; // ACK를 받으면 다음 패킷으로 이동
            log_event("Timeout, resending DATA packet");
        }

        seqNum++;
    }

    // 전송 종료를 나타내는 EOT 패킷 전송
    packet.type = EOT;
    packet.seqNum = seqNum;
    packet.ackNum = seqNum;
    packet.length = 0;
    sendto(sockfd, &packet, sizeof(packet), 0, (struct sockaddr *)&receiver_addr, addr_len);
    log_event("Sent EOT packet");

    // 자원 해제
    fclose(file);
    close(sockfd);
}

int main(int argc, char *argv[]) {
    if (argc != 7) {
        fprintf(stderr, "Usage: %s <sender_port> <receiver_ip> <receiver_port> <timeout_interval> <filename> <drop_prob>\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    int sender_port = atoi(argv[1]);
    const char *receiver_ip = argv[2];
    int receiver_port = atoi(argv[3]);
    int timeout_interval = atoi(argv[4]);
    const char *filename = argv[5];
    float drop_prob = atof(argv[6]);

    send_file(sender_port, receiver_ip, receiver_port, timeout_interval, filename, drop_prob);

    return 0;
}
